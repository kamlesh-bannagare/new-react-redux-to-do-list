{"version":3,"sources":["components/TodoInput.js","components/Todo.js","components/Search.js","redux/actionTypes.js","components/TodoList.js","redux/action.js","App.js","redux/reducer.js","redux/root-reducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["TodoInput","createTodo","useState","task","setTask","className","onSubmit","e","preventDefault","type","placeholder","id","name","value","onChange","target","Todo","toggleTodo","completed","removeTodo","updateTodo","isEditing","setIsEditing","editTask","setEditTask","TransitionGroup","Checkbox","CSSTransition","timeout","onClick","style","paddingRight","Search","padding","color","COMPLETE_TODO","ADD_TODO","REMOVO_TODO","UPDATE_TODO","TodoList","state","useSelector","todos","dispatch","useDispatch","update","updatedTask","types","payload","textAlign","newTodo","map","todo","complete","completeTodo","App","console","log","initialState","todosReducer","action","uuidv4","addedTodos","filterTodo","filter","t","updatedTodos","toggleTodos","rootReducer","combineReducers","store","createStore","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.390d0643.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TodoInput.css\";\r\n\r\nconst TodoInput = ({ createTodo }) => {\r\n    const [task, setTask] = useState(\"\");\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        createTodo(task);\r\n        setTask(\"\");\r\n    };\r\n    return (\r\n        <form className=\"TodoInput\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"enter Task\"\r\n                id=\"task\"\r\n                name=\"task\"\r\n                value={task}\r\n                onChange={(e) => setTask(e.target.value)}\r\n            />\r\n            <button>add todo</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoInput;","import React, { useState } from 'react';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nimport \"./Todo.css\";\r\n\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nconst Todo = ({ toggleTodo, task, completed, id, removeTodo, updateTodo }) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [editTask, setEditTask] = useState(task);\r\n\r\n    const handlUpdate = (e) => {\r\n        e.preventDefault();\r\n        updateTodo(id, editTask);\r\n        setIsEditing(false);\r\n    }\r\n\r\n    return (\r\n        <TransitionGroup className={completed ? \"Todo completed\" : \"Todo\"}>\r\n            <Checkbox  />\r\n            {isEditing ? (\r\n                <CSSTransition key=\"editing\" timeout={500} className=\"form\">\r\n                    <form className=\"todo-edit-form\" onSubmit={handlUpdate}>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"task\"\r\n                            value={editTask}\r\n                            onChange={(e) => setEditTask(e.target.value)}\r\n                        />\r\n                        <button>save</button>\r\n                    </form>\r\n                </CSSTransition>\r\n            ) : (\r\n                <CSSTransition key=\"normal\" timeout={500} className=\"task-text\">\r\n                    <li className=\"Todo-task\" onClick={toggleTodo}>\r\n                        {task}\r\n                    </li>\r\n                </CSSTransition >\r\n            )}\r\n\r\n            <div  className=\"toTo-buttons\">\r\n                <button onClick={() => setIsEditing(true)}>\r\n                    <i className=\"fa fa-pen\" />\r\n                </button>\r\n                <span style={{paddingRight:30}}></span>\r\n                <button  onClick={removeTodo}>\r\n                    <i  className=\"fa fa-trash\" />\r\n                </button>\r\n            </div>\r\n        </TransitionGroup >\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\n\r\nfunction Search() {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" style={{ padding: 10 }} />\r\n            <span>   </span>\r\n            <button style={{ padding: 10, color: 'blue' }}>Search</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","export const COMPLETE_TODO = \"COMPLETE_TODO\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVO_TODO = \"REMOVO_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\n","import React from 'react'\r\nimport TodoInput from \"./TodoInput\";\r\nimport Todo from \"./Todo\";\r\nimport Search from \"./Search\";\r\nimport \"./TodoList.css\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { completeTodo, addTodo, removeTodo, updateTodo } from '../redux/action'\r\n\r\nconst TodoList = () => {\r\n    const state = useSelector((state) => ({ ...state.todos }));\r\n    let dispatch = useDispatch();\r\n\r\n    const create = (newTodo) => {\r\n        dispatch(addTodo(newTodo));\r\n    };\r\n\r\n    const update = (id, updatedTask) => {\r\n        dispatch(updateTodo({ id, updatedTask }));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 style={{ textAlign: \"right\", padding: 30, paddingRight: 60 }}><span>Well-Come </span>kamlesh bannagare</h3>\r\n            <div className=\"TodoList\">\r\n                <Search />\r\n                <h1>Todo App with redux</h1>\r\n                <TodoInput createTodo={create} />\r\n                <ul>\r\n                    <TransitionGroup className=\"todo-list\">\r\n                        {state.todos &&\r\n                            state.todos.map((todo) => {\r\n                                return (\r\n                                    <CSSTransition key={todo.id} className=\"todo\">\r\n                                        <Todo\r\n                                            key={todo.id}\r\n                                            id={todo.id}\r\n                                            task={todo.task}\r\n                                            complete={todo.completed}\r\n                                            toggleTodo={() => dispatch(completeTodo(todo))}\r\n                                            removeTodo={() => dispatch(removeTodo(todo))}\r\n                                            updateTodo={update}\r\n                                        />\r\n                                    </CSSTransition>\r\n                                )\r\n                            })}\r\n                    </TransitionGroup>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import * as types from \"./actionTypes\";\r\n\r\nexport const completeTodo = (todo) => ({\r\n    type: types.COMPLETE_TODO,\r\n    payload: todo,\r\n});\r\nexport const addTodo = (todo) => ({\r\n    type: types.ADD_TODO,\r\n    payload: todo,\r\n});\r\nexport const removeTodo = (todo) => ({\r\n    type: types.REMOVO_TODO,\r\n    payload: todo,\r\n});\r\nexport const updateTodo = (todo) => ({\r\n    type: types.UPDATE_TODO,\r\n    payload: todo,\r\n});","\nimport './App.css';\nimport {useSelector} from 'react-redux';   // to extract the state from reducer or from the store basically we are using useSelector.\nimport TodoList from './components/TodoList.js';\n\n\nfunction App() {\n  const state = useSelector((state) =>({...state}))\n  console.log(\"state\", state);\n  return (\n    <div className=\"App\">\n     <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import * as types from \"./actionTypes\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst initialState = {\r\n    todos: [{ id: 1, task: \"something\", completed: false }],\r\n};\r\n\r\nconst todosReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.ADD_TODO:\r\n            const newTodo = {\r\n                id: uuidv4(),\r\n                task: action.payload,\r\n                completed: false,\r\n            };\r\n\r\n            const addedTodos = [...state.todos, newTodo];\r\n            return {\r\n                ...state,\r\n                todos: addedTodos,\r\n            };\r\n        case types.REMOVO_TODO:\r\n            const filterTodo = state.todos.filter((t) => t.id !== action.payload.id);\r\n            return {\r\n                ...state,\r\n                todos: filterTodo,\r\n            }\r\n        case types.UPDATE_TODO:\r\n            const updatedTodos = state.todos.map((todo) => {\r\n                if (todo.id === action.payload.id) {\r\n                    return { ...todo, task: action.payload.updatedTask }\r\n                }\r\n                return todo;\r\n            });\r\n            return {\r\n                ...state,\r\n                todos: updatedTodos,\r\n            }\r\n\r\n        case types.COMPLETE_TODO:\r\n            const toggleTodos = state.todos.map((t) =>\r\n                t.id === action.payload.id ? { ...action.payload, completed: !action.payload.completed }\r\n                    : t\r\n            )\r\n            return {\r\n                ...state,\r\n                todos: toggleTodos,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todosReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport todosReducer from './reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todos: todosReducer, // \"todos\" is the key through which we can currnt state from  the store in our react component\r\n\r\n})\r\n\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst middleware = []; // here we have middleware logger and  if we want to work with api's we can  use thunk or saga\r\n\r\nif (process.env.NODE_ENV === \"development\") {    // here we wanted logger in development mode not in production mode thats why we are useing this condition\r\n    middleware.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'; // provider act as bridge between react and redux thats why we need Provider from react readux.\nimport store from \"./redux/store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}